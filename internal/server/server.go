package server

import (
	"database/sql"
	"log"
	"net/http"
	"wallet_go/internal/logger"

	"wallet_go/internal/wallet"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
)

type Server struct {
	router     *gin.Engine
	repository *wallet.Repository
}

func NewServer(db *sql.DB) *Server {
	logger.InitLogger() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

	r := gin.Default()
	repo := wallet.NewRepository(db)

	s := &Server{
		router:     r,
		repository: repo,
	}

	s.routes()
	logger.GetLogger().Info("üöÄ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

	return s
}

func (s *Server) routes() {
	s.router.POST("/api/v1/wallet", s.handleWalletTransaction)          // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∫–æ—à–µ–ª—å–∫–æ–º
	s.router.GET("/api/v1/wallets/:walletID", s.handleGetWalletBalance) // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
}

func (s *Server) handleWalletTransaction(c *gin.Context) {
	log := logger.GetLogger()

	var req struct {
		WalletID      uuid.UUID `json:"walletId" binding:"required"`
		OperationType string    `json:"operationType" binding:"required"`
		Amount        int64     `json:"amount" binding:"required"`
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		log.WithError(err).Warn("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	log.WithFields(logrus.Fields{
		"walletId":      req.WalletID,
		"operationType": req.OperationType,
		"amount":        req.Amount,
	}).Info("üì© –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")

	err := s.repository.UpdateBalance(req.WalletID, req.Amount, req.OperationType)
	if err != nil {
		log.WithError(err).Error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
		if err.Error() == "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
		}
		return
	}

	log.WithFields(logrus.Fields{"walletId": req.WalletID}).Info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	c.JSON(http.StatusOK, gin.H{"message": "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"})
}

func (s *Server) handleGetWalletBalance(c *gin.Context) {
	walletID, err := uuid.Parse(c.Param("walletID"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID"})
		return
	}

	balance, err := s.repository.GetWalletBalance(walletID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"walletId": walletID, "balance": balance})
}

func (s *Server) Run(addr string) {
	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s", addr)
	if err := s.router.Run(addr); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
