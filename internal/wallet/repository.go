package wallet

import (
	"database/sql"
	"errors"
	"log"

	"github.com/google/uuid"
	"github.com/sirupsen/logrus"

	"wallet_go/internal/logger"
)

type Repository struct {
	db *sql.DB
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func NewRepository(db *sql.DB) *Repository {
	return &Repository{db: db}
}

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
func (r *Repository) GetWalletBalance(walletID uuid.UUID) (int64, error) {
	var balance int64
	// –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
	err := r.db.QueryRow("SELECT balance FROM wallets WHERE id = $1", walletID).Scan(&balance)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return 0, errors.New("–∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: %v", err)
		return 0, err
	}
	return balance, nil
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
func (r *Repository) UpdateBalance(walletID uuid.UUID, amount int64, operationType string) error {
	log := logger.GetLogger()
	tx, err := r.db.Begin()
	if err != nil {
		log.WithError(err).Error("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return err
	}
	defer tx.Rollback()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑–æ–ª—è—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	_, err = tx.Exec("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE")
	if err != nil {
		log.WithError(err).Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –∏–∑–æ–ª—è—Ü–∏–∏")
		return err
	}

	log.WithFields(logrus.Fields{"walletId": walletID}).Info("üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

	// üî• –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	var currentBalance int64
	err = tx.QueryRow("SELECT balance FROM wallets WHERE id = $1 FOR UPDATE", walletID).Scan(&currentBalance)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			log.Warn("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
			return errors.New("–∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
		log.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î")
		return err
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
	var newBalance int64
	if operationType == "DEPOSIT" {
		newBalance = currentBalance + amount
	} else if operationType == "WITHDRAW" {
		if currentBalance < amount {
			log.Warn("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞")
			return errors.New("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
		}
		newBalance = currentBalance - amount
	} else {
		log.Warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
		return errors.New("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ç–∞–±–ª–∏—Ü–µ wallets
	_, err = tx.Exec("UPDATE wallets SET balance = $1 WHERE id = $2", newBalance, walletID)
	if err != nil {
		log.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
		return err
	}

	// üìå –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ transactions
	_, err = tx.Exec("INSERT INTO transactions (wallet_id, operation_type, amount) VALUES ($1, $2, $3)",
		walletID, operationType, amount)
	if err != nil {
		log.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return err
	}

	// –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	err = tx.Commit()
	if err != nil {
		log.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
		return err
	}

	log.WithFields(logrus.Fields{"walletId": walletID, "newBalance": newBalance}).Info("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	return nil
}
